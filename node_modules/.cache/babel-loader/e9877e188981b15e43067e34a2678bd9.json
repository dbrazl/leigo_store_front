{"ast":null,"code":"import { all, takeLatest, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\nimport { indexProductsRequest, indexProductsSuccess, productsFailure, resetPage, indexOneProductSuccess } from \"./actions\";\n\nfunction* indexProducts() {\n  try {\n    const page = yield select(state => state.products.page);\n\n    const _ref = yield race({\n      response: call(api.get, \"/product?page=\".concat(page)),\n      timeout: call(timer)\n    }),\n          response = _ref.response;\n\n    yield put(indexProductsSuccess(response.data));\n    yield put(indexProductsRequest());\n  } catch (error) {\n    yield put(resetPage());\n    yield errorHandler(error, productsFailure);\n  }\n}\n\nfunction* indexOneProduct({\n  payload\n}) {\n  try {\n    console.tron.log(\"Id \", id);\n    const id = payload.params.id;\n    console.tron.log(\"Id \", id);\n\n    const _ref2 = yield race({\n      response: call(api.get, \"/product/\".concat(id)),\n      timeout: call(timer)\n    }),\n          response = _ref2.response;\n\n    console.tron.log(\"Response \", response.data);\n    yield put(indexOneProductSuccess(response.data));\n  } catch (error) {\n    console.tron.log(\"Error \", error); // yield errorHandler(error, productsFailure);\n  }\n}\n\nexport default all([takeLatest(\"@products/INDEX_PRODUCTS_REQUEST\", indexProducts), takeLatest(\"@products/INDEX_ONE_PRODUCT_REQUEST\", indexOneProduct)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/products/saga.js"],"names":["all","takeLatest","put","call","race","select","api","errorHandler","timer","indexProductsRequest","indexProductsSuccess","productsFailure","resetPage","indexOneProductSuccess","indexProducts","page","state","products","response","get","timeout","data","error","indexOneProduct","payload","console","tron","log","id","params"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,MAA3C,QAAyD,oBAAzD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,eAHF,EAIEC,SAJF,EAKEC,sBALF,QAMO,WANP;;AAQA,UAAUC,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMV,MAAM,CAAEW,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeF,IAA3B,CAAzB;;AADE,iBAGmB,MAAMX,IAAI,CAAC;AAC9Bc,MAAAA,QAAQ,EAAEf,IAAI,CAACG,GAAG,CAACa,GAAL,0BAA2BJ,IAA3B,EADgB;AAE9BK,MAAAA,OAAO,EAAEjB,IAAI,CAACK,KAAD;AAFiB,KAAD,CAH7B;AAAA,UAGMU,QAHN,QAGMA,QAHN;;AAQF,UAAMhB,GAAG,CAACQ,oBAAoB,CAACQ,QAAQ,CAACG,IAAV,CAArB,CAAT;AACA,UAAMnB,GAAG,CAACO,oBAAoB,EAArB,CAAT;AACD,GAVD,CAUE,OAAOa,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACU,SAAS,EAAV,CAAT;AACA,UAAML,YAAY,CAACe,KAAD,EAAQX,eAAR,CAAlB;AACD;AACF;;AAED,UAAUY,eAAV,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAuC;AACrC,MAAI;AACFC,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,KAAjB,EAAwBC,EAAxB;AADE,UAGMA,EAHN,GAGaJ,OAAO,CAACK,MAHrB,CAGMD,EAHN;AAKFH,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,KAAjB,EAAwBC,EAAxB;;AALE,kBAOmB,MAAMxB,IAAI,CAAC;AAC9Bc,MAAAA,QAAQ,EAAEf,IAAI,CAACG,GAAG,CAACa,GAAL,qBAAsBS,EAAtB,EADgB;AAE9BR,MAAAA,OAAO,EAAEjB,IAAI,CAACK,KAAD;AAFiB,KAAD,CAP7B;AAAA,UAOMU,QAPN,SAOMA,QAPN;;AAYFO,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,WAAjB,EAA8BT,QAAQ,CAACG,IAAvC;AAEA,UAAMnB,GAAG,CAACW,sBAAsB,CAACK,QAAQ,CAACG,IAAV,CAAvB,CAAT;AACD,GAfD,CAeE,OAAOC,KAAP,EAAc;AACdG,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,QAAjB,EAA2BL,KAA3B,EADc,CAEd;AACD;AACF;;AAED,eAAetB,GAAG,CAAC,CACjBC,UAAU,CAAC,kCAAD,EAAqCa,aAArC,CADO,EAEjBb,UAAU,CAAC,qCAAD,EAAwCsB,eAAxC,CAFO,CAAD,CAAlB","sourcesContent":["import { all, takeLatest, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\n\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nimport {\n  indexProductsRequest,\n  indexProductsSuccess,\n  productsFailure,\n  resetPage,\n  indexOneProductSuccess,\n} from \"./actions\";\n\nfunction* indexProducts() {\n  try {\n    const page = yield select((state) => state.products.page);\n\n    const { response } = yield race({\n      response: call(api.get, `/product?page=${page}`),\n      timeout: call(timer),\n    });\n\n    yield put(indexProductsSuccess(response.data));\n    yield put(indexProductsRequest());\n  } catch (error) {\n    yield put(resetPage());\n    yield errorHandler(error, productsFailure);\n  }\n}\n\nfunction* indexOneProduct({ payload }) {\n  try {\n    console.tron.log(\"Id \", id);\n\n    const { id } = payload.params;\n\n    console.tron.log(\"Id \", id);\n\n    const { response } = yield race({\n      response: call(api.get, `/product/${id}`),\n      timeout: call(timer),\n    });\n\n    console.tron.log(\"Response \", response.data);\n\n    yield put(indexOneProductSuccess(response.data));\n  } catch (error) {\n    console.tron.log(\"Error \", error);\n    // yield errorHandler(error, productsFailure);\n  }\n}\n\nexport default all([\n  takeLatest(\"@products/INDEX_PRODUCTS_REQUEST\", indexProducts),\n  takeLatest(\"@products/INDEX_ONE_PRODUCT_REQUEST\", indexOneProduct),\n]);\n"]},"metadata":{},"sourceType":"module"}