{"ast":null,"code":"import { all, takeLatest, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\nimport { indexProductsRequest, indexProductsSuccess, productsFailure, resetPage } from \"./actions\";\nimport { indexSellRequest } from \"../sells/actions\";\nimport { indexProductCategoriesRequest } from \"../productCategories/actions\";\n\nfunction* indexProducts() {\n  try {\n    const page = yield select(state => state.products.page);\n\n    const _ref = yield race({\n      response: call(api.get, \"/product?page=\".concat(page)),\n      timeout: call(timer)\n    }),\n          response = _ref.response;\n\n    yield put(indexProductsSuccess(response.data));\n    yield put(indexProductsRequest());\n  } catch (error) {\n    yield put(resetPage()); // yield put(indexProductCategoriesRequest());\n\n    yield errorHandler(error, productsFailure);\n  }\n}\n\nexport default all([takeLatest(\"@products/INDEX_PRODUCTS_REQUEST\", indexProducts)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/products/saga.js"],"names":["all","takeLatest","put","call","race","select","api","errorHandler","timer","indexProductsRequest","indexProductsSuccess","productsFailure","resetPage","indexSellRequest","indexProductCategoriesRequest","indexProducts","page","state","products","response","get","timeout","data","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,MAA3C,QAAyD,oBAAzD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,eAHF,EAIEC,SAJF,QAKO,WALP;AAMA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,6BAAT,QAA8C,8BAA9C;;AAEA,UAAUC,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMX,MAAM,CAAEY,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeF,IAA3B,CAAzB;;AADE,iBAGmB,MAAMZ,IAAI,CAAC;AAC9Be,MAAAA,QAAQ,EAAEhB,IAAI,CAACG,GAAG,CAACc,GAAL,0BAA2BJ,IAA3B,EADgB;AAE9BK,MAAAA,OAAO,EAAElB,IAAI,CAACK,KAAD;AAFiB,KAAD,CAH7B;AAAA,UAGMW,QAHN,QAGMA,QAHN;;AAQF,UAAMjB,GAAG,CAACQ,oBAAoB,CAACS,QAAQ,CAACG,IAAV,CAArB,CAAT;AACA,UAAMpB,GAAG,CAACO,oBAAoB,EAArB,CAAT;AACD,GAVD,CAUE,OAAOc,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACU,SAAS,EAAV,CAAT,CADc,CAEd;;AACA,UAAML,YAAY,CAACgB,KAAD,EAAQZ,eAAR,CAAlB;AACD;AACF;;AAED,eAAeX,GAAG,CAAC,CACjBC,UAAU,CAAC,kCAAD,EAAqCc,aAArC,CADO,CAAD,CAAlB","sourcesContent":["import { all, takeLatest, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\n\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nimport {\n  indexProductsRequest,\n  indexProductsSuccess,\n  productsFailure,\n  resetPage,\n} from \"./actions\";\nimport { indexSellRequest } from \"../sells/actions\";\nimport { indexProductCategoriesRequest } from \"../productCategories/actions\";\n\nfunction* indexProducts() {\n  try {\n    const page = yield select((state) => state.products.page);\n\n    const { response } = yield race({\n      response: call(api.get, `/product?page=${page}`),\n      timeout: call(timer),\n    });\n\n    yield put(indexProductsSuccess(response.data));\n    yield put(indexProductsRequest());\n  } catch (error) {\n    yield put(resetPage());\n    // yield put(indexProductCategoriesRequest());\n    yield errorHandler(error, productsFailure);\n  }\n}\n\nexport default all([\n  takeLatest(\"@products/INDEX_PRODUCTS_REQUEST\", indexProducts),\n]);\n"]},"metadata":{},"sourceType":"module"}