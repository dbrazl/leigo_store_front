{"ast":null,"code":"import { takeLatest, all, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport { indexSellRequest, indexSellSuccess, resetPage, sellFailure } from \"./actions\";\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* indexSells() {\n  try {\n    const page = yield select(state => state.sells.page);\n\n    let _ref = yield race({\n      response: call(api.get, \"/sell?page=\".concat(page)),\n      timeout: call(timer)\n    }),\n        response = _ref.response;\n\n    const products = yield select(state => state.products.products);\n    const data = response.data.map(item => {\n      products.forEach(product => {\n        if (item.product_id_fk === product.id) item.photo = product.image;\n        return item;\n      });\n    });\n    yield put(indexSellSuccess(response.data));\n    yield put(indexSellRequest());\n  } catch (error) {\n    yield put(resetPage());\n    yield errorHandler(error, sellFailure);\n  }\n}\n\nexport default all([takeLatest(\"@sell/INDEX_SELL_REQUEST\", indexSells)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/sells/saga.js"],"names":["takeLatest","all","put","call","race","select","api","indexSellRequest","indexSellSuccess","resetPage","sellFailure","errorHandler","timer","indexSells","page","state","sells","response","get","timeout","products","data","map","item","forEach","product","product_id_fk","id","photo","image","error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,MAA3C,QAAyD,oBAAzD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,WAJF,QAKO,WALP;AAOA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,UAAUC,UAAV,GAAuB;AACrB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,MAAM,CAAEU,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYF,IAAxB,CAAzB;;AADE,eAGiB,MAAMV,IAAI,CAAC;AAC5Ba,MAAAA,QAAQ,EAAEd,IAAI,CAACG,GAAG,CAACY,GAAL,uBAAwBJ,IAAxB,EADc;AAE5BK,MAAAA,OAAO,EAAEhB,IAAI,CAACS,KAAD;AAFe,KAAD,CAH3B;AAAA,QAGIK,QAHJ,QAGIA,QAHJ;;AAQF,UAAMG,QAAQ,GAAG,MAAMf,MAAM,CAAEU,KAAD,IAAWA,KAAK,CAACK,QAAN,CAAeA,QAA3B,CAA7B;AAEA,UAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAU;AACvCH,MAAAA,QAAQ,CAACI,OAAT,CAAkBC,OAAD,IAAa;AAC5B,YAAIF,IAAI,CAACG,aAAL,KAAuBD,OAAO,CAACE,EAAnC,EAAuCJ,IAAI,CAACK,KAAL,GAAaH,OAAO,CAACI,KAArB;AAEvC,eAAON,IAAP;AACD,OAJD;AAKD,KANY,CAAb;AAQA,UAAMrB,GAAG,CAACM,gBAAgB,CAACS,QAAQ,CAACI,IAAV,CAAjB,CAAT;AACA,UAAMnB,GAAG,CAACK,gBAAgB,EAAjB,CAAT;AACD,GApBD,CAoBE,OAAOuB,KAAP,EAAc;AACd,UAAM5B,GAAG,CAACO,SAAS,EAAV,CAAT;AACA,UAAME,YAAY,CAACmB,KAAD,EAAQpB,WAAR,CAAlB;AACD;AACF;;AAED,eAAeT,GAAG,CAAC,CAACD,UAAU,CAAC,0BAAD,EAA6Ba,UAA7B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, all, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"~/services/api\";\n\nimport {\n  indexSellRequest,\n  indexSellSuccess,\n  resetPage,\n  sellFailure,\n} from \"./actions\";\n\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* indexSells() {\n  try {\n    const page = yield select((state) => state.sells.page);\n\n    let { response } = yield race({\n      response: call(api.get, `/sell?page=${page}`),\n      timeout: call(timer),\n    });\n\n    const products = yield select((state) => state.products.products);\n\n    const data = response.data.map((item) => {\n      products.forEach((product) => {\n        if (item.product_id_fk === product.id) item.photo = product.image;\n\n        return item;\n      });\n    });\n\n    yield put(indexSellSuccess(response.data));\n    yield put(indexSellRequest());\n  } catch (error) {\n    yield put(resetPage());\n    yield errorHandler(error, sellFailure);\n  }\n}\n\nexport default all([takeLatest(\"@sell/INDEX_SELL_REQUEST\", indexSells)]);\n"]},"metadata":{},"sourceType":"module"}