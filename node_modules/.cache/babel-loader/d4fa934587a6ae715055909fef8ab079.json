{"ast":null,"code":"import { takeLatest, all, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport { indexSellRequest, indexSellSuccess, sellFailure } from \"./actions\";\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* indexSell() {\n  try {\n    const page = yield select(state => state.sells.page);\n\n    const _ref = yield race({\n      response: call(api.get, \"/sel?page=\".concat(page)),\n      timeout: call(timer)\n    }),\n          response = _ref.response;\n\n    yield put(indexSellSuccess(response.data));\n    yield put(indexSellRequest());\n  } catch (error) {\n    yield put(resetPage());\n    yield errorHandler(error, sellFailure);\n  }\n}\n\nexport default all([takeLatest(\"@sell/INDEX_SELL_REQUEST\", indexSell)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/sells/saga.js"],"names":["takeLatest","all","put","call","race","select","api","indexSellRequest","indexSellSuccess","sellFailure","errorHandler","timer","indexSell","page","state","sells","response","get","timeout","data","error","resetPage"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,MAA3C,QAAyD,oBAAzD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,WAA7C,QAAgE,WAAhE;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,UAAUC,SAAV,GAAsB;AACpB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMR,MAAM,CAAES,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYF,IAAxB,CAAzB;;AADE,iBAGmB,MAAMT,IAAI,CAAC;AAC9BY,MAAAA,QAAQ,EAAEb,IAAI,CAACG,GAAG,CAACW,GAAL,sBAAuBJ,IAAvB,EADgB;AAE9BK,MAAAA,OAAO,EAAEf,IAAI,CAACQ,KAAD;AAFiB,KAAD,CAH7B;AAAA,UAGMK,QAHN,QAGMA,QAHN;;AAQF,UAAMd,GAAG,CAACM,gBAAgB,CAACQ,QAAQ,CAACG,IAAV,CAAjB,CAAT;AACA,UAAMjB,GAAG,CAACK,gBAAgB,EAAjB,CAAT;AACD,GAVD,CAUE,OAAOa,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACmB,SAAS,EAAV,CAAT;AACA,UAAMX,YAAY,CAACU,KAAD,EAAQX,WAAR,CAAlB;AACD;AACF;;AAED,eAAeR,GAAG,CAAC,CAACD,UAAU,CAAC,0BAAD,EAA6BY,SAA7B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, all, put, call, race, select } from \"redux-saga/effects\";\nimport api from \"~/services/api\";\n\nimport { indexSellRequest, indexSellSuccess, sellFailure } from \"./actions\";\n\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* indexSell() {\n  try {\n    const page = yield select((state) => state.sells.page);\n\n    const { response } = yield race({\n      response: call(api.get, `/sel?page=${page}`),\n      timeout: call(timer),\n    });\n\n    yield put(indexSellSuccess(response.data));\n    yield put(indexSellRequest());\n  } catch (error) {\n    yield put(resetPage());\n    yield errorHandler(error, sellFailure);\n  }\n}\n\nexport default all([takeLatest(\"@sell/INDEX_SELL_REQUEST\", indexSell)]);\n"]},"metadata":{},"sourceType":"module"}