{"ast":null,"code":"import { takeLatest, put, call, all, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport { updateUserSuccess, updateAvatarSuccess, userFailure, inactiveUserSuccess } from \"./actions\";\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* updateAvatar({\n  payload\n}) {\n  try {\n    const file = payload.file;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    console.tron.log(formData);\n\n    const _ref = yield race({\n      response: call(api.post, \"/avatar\", formData),\n      timeout: call(timer)\n    }),\n          response = _ref.response;\n\n    console.tron.log(response.data);\n    yield put(updateAvatarSuccess(response.body));\n  } catch (error) {\n    yield errorHandler(error, userFailure);\n  }\n}\n\nfunction* updateUser({\n  payload\n}) {\n  try {\n    const body = payload.body;\n\n    const _ref2 = yield race({\n      response: call(api.put, \"/user\", body),\n      timeout: call(timer)\n    }),\n          response = _ref2.response;\n\n    yield put(updateUserSuccess(response.data));\n  } catch (error) {\n    console.tron.log(error);\n    yield errorHandler(error, userFailure);\n  }\n}\n\nfunction* inactive() {\n  try {\n    const username = yield select(state => state.user.profile.username);\n    yield race({\n      response: call(api.put, \"/user/inactive/\".concat(username)),\n      timeout: call(timer)\n    });\n    yield put(inactiveUserSuccess());\n  } catch (error) {\n    yield errorHandler(error, userFailure);\n  }\n}\n\nexport default all([takeLatest(\"@user/UPDATE_AVATAR_REQUEST\", updateAvatar), takeLatest(\"@user/UPDATE_USER_REQUEST\", updateUser), takeLatest(\"@user/INACTIVE_USER_REQUEST\", inactive)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/user/saga.js"],"names":["takeLatest","put","call","all","race","select","api","updateUserSuccess","updateAvatarSuccess","userFailure","inactiveUserSuccess","errorHandler","timer","updateAvatar","payload","file","formData","FormData","append","console","tron","log","response","post","timeout","data","body","error","updateUser","inactive","username","state","user","profile"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,MAA3C,QAAyD,oBAAzD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SACEC,iBADF,EAEEC,mBAFF,EAGEC,WAHF,EAIEC,mBAJF,QAKO,WALP;AAOA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,UAAUC,YAAV,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAoC;AAClC,MAAI;AAAA,UACMC,IADN,GACeD,OADf,CACMC,IADN;AAGF,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;AAEAI,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBL,QAAjB;;AANE,iBAQmB,MAAMZ,IAAI,CAAC;AAC9BkB,MAAAA,QAAQ,EAAEpB,IAAI,CAACI,GAAG,CAACiB,IAAL,EAAW,SAAX,EAAsBP,QAAtB,CADgB;AAE9BQ,MAAAA,OAAO,EAAEtB,IAAI,CAACU,KAAD;AAFiB,KAAD,CAR7B;AAAA,UAQMU,QARN,QAQMA,QARN;;AAaFH,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBC,QAAQ,CAACG,IAA1B;AAEA,UAAMxB,GAAG,CAACO,mBAAmB,CAACc,QAAQ,CAACI,IAAV,CAApB,CAAT;AACD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd,UAAMhB,YAAY,CAACgB,KAAD,EAAQlB,WAAR,CAAlB;AACD;AACF;;AAED,UAAUmB,UAAV,CAAqB;AAAEd,EAAAA;AAAF,CAArB,EAAkC;AAChC,MAAI;AAAA,UACMY,IADN,GACeZ,OADf,CACMY,IADN;;AAAA,kBAGmB,MAAMtB,IAAI,CAAC;AAC9BkB,MAAAA,QAAQ,EAAEpB,IAAI,CAACI,GAAG,CAACL,GAAL,EAAU,OAAV,EAAmByB,IAAnB,CADgB;AAE9BF,MAAAA,OAAO,EAAEtB,IAAI,CAACU,KAAD;AAFiB,KAAD,CAH7B;AAAA,UAGMU,QAHN,SAGMA,QAHN;;AAQF,UAAMrB,GAAG,CAACM,iBAAiB,CAACe,QAAQ,CAACG,IAAV,CAAlB,CAAT;AACD,GATD,CASE,OAAOE,KAAP,EAAc;AACdR,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBM,KAAjB;AACA,UAAMhB,YAAY,CAACgB,KAAD,EAAQlB,WAAR,CAAlB;AACD;AACF;;AAED,UAAUoB,QAAV,GAAqB;AACnB,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMzB,MAAM,CAAE0B,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,OAAX,CAAmBH,QAA/B,CAA7B;AAEA,UAAM1B,IAAI,CAAC;AACTkB,MAAAA,QAAQ,EAAEpB,IAAI,CAACI,GAAG,CAACL,GAAL,2BAA4B6B,QAA5B,EADL;AAETN,MAAAA,OAAO,EAAEtB,IAAI,CAACU,KAAD;AAFJ,KAAD,CAAV;AAKA,UAAMX,GAAG,CAACS,mBAAmB,EAApB,CAAT;AACD,GATD,CASE,OAAOiB,KAAP,EAAc;AACd,UAAMhB,YAAY,CAACgB,KAAD,EAAQlB,WAAR,CAAlB;AACD;AACF;;AAED,eAAeN,GAAG,CAAC,CACjBH,UAAU,CAAC,6BAAD,EAAgCa,YAAhC,CADO,EAEjBb,UAAU,CAAC,2BAAD,EAA8B4B,UAA9B,CAFO,EAGjB5B,UAAU,CAAC,6BAAD,EAAgC6B,QAAhC,CAHO,CAAD,CAAlB","sourcesContent":["import { takeLatest, put, call, all, race, select } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\n\nimport {\n  updateUserSuccess,\n  updateAvatarSuccess,\n  userFailure,\n  inactiveUserSuccess,\n} from \"./actions\";\n\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* updateAvatar({ payload }) {\n  try {\n    const { file } = payload;\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    console.tron.log(formData);\n\n    const { response } = yield race({\n      response: call(api.post, \"/avatar\", formData),\n      timeout: call(timer),\n    });\n\n    console.tron.log(response.data);\n\n    yield put(updateAvatarSuccess(response.body));\n  } catch (error) {\n    yield errorHandler(error, userFailure);\n  }\n}\n\nfunction* updateUser({ payload }) {\n  try {\n    const { body } = payload;\n\n    const { response } = yield race({\n      response: call(api.put, \"/user\", body),\n      timeout: call(timer),\n    });\n\n    yield put(updateUserSuccess(response.data));\n  } catch (error) {\n    console.tron.log(error);\n    yield errorHandler(error, userFailure);\n  }\n}\n\nfunction* inactive() {\n  try {\n    const username = yield select((state) => state.user.profile.username);\n\n    yield race({\n      response: call(api.put, `/user/inactive/${username}`),\n      timeout: call(timer),\n    });\n\n    yield put(inactiveUserSuccess());\n  } catch (error) {\n    yield errorHandler(error, userFailure);\n  }\n}\n\nexport default all([\n  takeLatest(\"@user/UPDATE_AVATAR_REQUEST\", updateAvatar),\n  takeLatest(\"@user/UPDATE_USER_REQUEST\", updateUser),\n  takeLatest(\"@user/INACTIVE_USER_REQUEST\", inactive),\n]);\n"]},"metadata":{},"sourceType":"module"}