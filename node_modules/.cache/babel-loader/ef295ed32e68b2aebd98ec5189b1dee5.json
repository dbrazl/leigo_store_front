{"ast":null,"code":"import { takeLatest, all, put, call, race } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport history from \"../../../services/history\";\nimport { signInSuccess, signFailure, signUpSuccess, restoreAccountSuccess } from \"./actions\";\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* signIn({\n  payload\n}) {\n  try {\n    console.tron.log(\"Singin\");\n    const body = payload.body;\n\n    const _ref = yield race({\n      response: call(api.post, \"/session\", body),\n      timeout: call(timer)\n    }),\n          response = _ref.response;\n\n    const token = response.data.token;\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n    yield put(signInSuccess(response.data));\n    history.push(\"/account\");\n  } catch (error) {\n    console.tron.log(error);\n    yield errorHandler(error, signFailure);\n  }\n}\n\nfunction* signUp({\n  payload\n}) {\n  try {\n    const body = payload.body;\n\n    const _ref2 = yield race({\n      response: call(api.post, \"/user\", body),\n      timeout: call(timer)\n    }),\n          response = _ref2.response;\n\n    yield put(signUpSuccess(response.body));\n  } catch (error) {\n    yield errorHandler(error, signFailure);\n  }\n}\n\nfunction* restoreAccount({\n  payload\n}) {\n  try {\n    const username = payload.params.username;\n\n    const _ref3 = yield race({\n      response: call(api.put, \"/restore/\".concat(username)),\n      timeout: call(timer)\n    }),\n          response = _ref3.response;\n\n    yield put(restoreAccountSuccess(response.data));\n  } catch (error) {\n    yield errorHandler(error, signFailure);\n  }\n}\n\nfunction setToken({\n  payload\n}) {\n  if (!payload) return;\n  const token = payload.auth.token;\n\n  if (token) {\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n  }\n}\n\nfunction signOut() {\n  api.defaults.headers.Authorization = null;\n  console.tron.log(\"Me lanca ai.\");\n  history.push(\"/\");\n}\n\nexport default all([takeLatest(\"persist/REHYDRATE\", setToken), takeLatest(\"@auth/SIGN_IN_REQUEST\", signIn), takeLatest(\"@auth/SIGN_UP_REQUEST\", signUp), takeLatest(\"@auth/RESTORE_ACCOUNT_SUCCESS\", restoreAccount), takeLatest(\"@auth/SIGN_OUT\", signOut)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/auth/saga.js"],"names":["takeLatest","all","put","call","race","api","history","signInSuccess","signFailure","signUpSuccess","restoreAccountSuccess","errorHandler","timer","signIn","payload","console","tron","log","body","response","post","timeout","token","data","defaults","headers","Authorization","push","error","signUp","restoreAccount","username","params","setToken","auth","signOut"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, call, race } from \"redux-saga/effects\";\nimport api from \"../../../services/api\";\nimport history from \"~/services/history\";\n\nimport {\n  signInSuccess,\n  signFailure,\n  signUpSuccess,\n  restoreAccountSuccess,\n} from \"./actions\";\n\nimport errorHandler from \"../utils/errorHandler\";\nimport timer from \"../utils/timer\";\n\nfunction* signIn({ payload }) {\n  try {\n    console.tron.log(\"Singin\");\n    const { body } = payload;\n\n    const { response } = yield race({\n      response: call(api.post, \"/session\", body),\n      timeout: call(timer),\n    });\n\n    const { token } = response.data;\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    yield put(signInSuccess(response.data));\n    history.push(\"/account\");\n  } catch (error) {\n    console.tron.log(error);\n    yield errorHandler(error, signFailure);\n  }\n}\n\nfunction* signUp({ payload }) {\n  try {\n    const { body } = payload;\n\n    const { response } = yield race({\n      response: call(api.post, \"/user\", body),\n      timeout: call(timer),\n    });\n\n    yield put(signUpSuccess(response.body));\n  } catch (error) {\n    yield errorHandler(error, signFailure);\n  }\n}\n\nfunction* restoreAccount({ payload }) {\n  try {\n    const { username } = payload.params;\n\n    const { response } = yield race({\n      response: call(api.put, `/restore/${username}`),\n      timeout: call(timer),\n    });\n\n    yield put(restoreAccountSuccess(response.data));\n  } catch (error) {\n    yield errorHandler(error, signFailure);\n  }\n}\n\nfunction setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nfunction signOut() {\n  api.defaults.headers.Authorization = null;\n\n  console.tron.log(\"Me lanca ai.\");\n  history.push(\"/\");\n}\n\nexport default all([\n  takeLatest(\"persist/REHYDRATE\", setToken),\n  takeLatest(\"@auth/SIGN_IN_REQUEST\", signIn),\n  takeLatest(\"@auth/SIGN_UP_REQUEST\", signUp),\n  takeLatest(\"@auth/RESTORE_ACCOUNT_SUCCESS\", restoreAccount),\n  takeLatest(\"@auth/SIGN_OUT\", signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}