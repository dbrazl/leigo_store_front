{"ast":null,"code":"import { all, takeLatest, call, race, put } from \"redux-saga/effects\";\nimport { indexProductCategoriesSuccess, productCategoriesFailure } from \"./actions\";\nimport api from \"../../../services/api\";\nimport timer from \"../utils/timer\";\nimport errorHandler from \"../utils/errorHandler\";\n\nfunction* productCategories() {\n  try {\n    const _ref = yield race({\n      response: call(api.get, \"/assign/category\"),\n      timeout: call(timer)\n    }),\n          response = _ref.response;\n\n    yield put(indexProductCategoriesSuccess(response.data));\n  } catch (error) {// yield errorHandler(error, productCategoriesFailure);\n  }\n}\n\nexport default all([takeLatest(\"@productCategories/INDEX_PRODUCT_CATEGORIES_REQUEST\", productCategories)]);","map":{"version":3,"sources":["/home/daniel/Documents/Projetos/Software/Web/Reactjs/leigo_store/src/store/modules/productCategories/saga.js"],"names":["all","takeLatest","call","race","put","indexProductCategoriesSuccess","productCategoriesFailure","api","timer","errorHandler","productCategories","response","get","timeout","data","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SACEC,6BADF,EAEEC,wBAFF,QAGO,WAHP;AAIA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAEA,UAAUC,iBAAV,GAA8B;AAC5B,MAAI;AAAA,iBACmB,MAAMP,IAAI,CAAC;AAC9BQ,MAAAA,QAAQ,EAAET,IAAI,CAACK,GAAG,CAACK,GAAL,EAAU,kBAAV,CADgB;AAE9BC,MAAAA,OAAO,EAAEX,IAAI,CAACM,KAAD;AAFiB,KAAD,CAD7B;AAAA,UACMG,QADN,QACMA,QADN;;AAMF,UAAMP,GAAG,CAACC,6BAA6B,CAACM,QAAQ,CAACG,IAAV,CAA9B,CAAT;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc,CACd;AACD;AACF;;AAED,eAAef,GAAG,CAAC,CACjBC,UAAU,CACR,qDADQ,EAERS,iBAFQ,CADO,CAAD,CAAlB","sourcesContent":["import { all, takeLatest, call, race, put } from \"redux-saga/effects\";\nimport {\n  indexProductCategoriesSuccess,\n  productCategoriesFailure,\n} from \"./actions\";\nimport api from \"~/services/api\";\nimport timer from \"../utils/timer\";\nimport errorHandler from \"../utils/errorHandler\";\n\nfunction* productCategories() {\n  try {\n    const { response } = yield race({\n      response: call(api.get, \"/assign/category\"),\n      timeout: call(timer),\n    });\n\n    yield put(indexProductCategoriesSuccess(response.data));\n  } catch (error) {\n    // yield errorHandler(error, productCategoriesFailure);\n  }\n}\n\nexport default all([\n  takeLatest(\n    \"@productCategories/INDEX_PRODUCT_CATEGORIES_REQUEST\",\n    productCategories\n  ),\n]);\n"]},"metadata":{},"sourceType":"module"}